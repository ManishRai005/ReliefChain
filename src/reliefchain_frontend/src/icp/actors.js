// src/icp/actors.js
import { Actor, HttpAgent } from '@dfinity/agent';
import { idlFactory as donationIdl } from '../canisters/donation_management/service.did.js';
import { idlFactory as resourceAllocationIdl } from '../canisters/resource_allocation/service.did.js';
import { idlFactory as identityVerificationIdl } from '../canisters/identity_verification/service.did.js';
// Replace these with your actual canister IDs (you can get them from dfx canister id <canister_name>)
const donationCanisterId = 'aovwi-4maaa-aaaaa-qaagq-cai';
const resourceAllocationCanisterId = 'ahw5u-keaaa-aaaaa-qaaha-cai';
const identityVerificationCanisterId = 'aax3a-h4aaa-aaaaa-qaahq-cai';

// Create an agent (for local testing, use http://localhost:8000)
const agent = new HttpAgent({ host: "http://localhost:4943" });

// If you are testing locally, you may need to fetch root key (DO NOT do this on production/mainnet)
agent.fetchRootKey();

// Import your candid interface (generated by dfx) for each canister.
// For example, if you generated .did files using "dfx generate", import them as follows:


// Create actors for your canisters.
export const donationActor = Actor.createActor(donationIdl, {
  agent,
  canisterId: donationCanisterId,
});

export const resourceAllocationActor = Actor.createActor(resourceAllocationIdl, {
  agent,
  canisterId: resourceAllocationCanisterId,
});

export const identityVerificationActor = Actor.createActor(identityVerificationIdl, {
  agent,
  canisterId: identityVerificationCanisterId,
});
